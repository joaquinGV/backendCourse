paths:
  # GET /api/users
  /api/users:
    get:
      summary: Corrobora el funcionamiento básico de la API.
      tags:
        - Users
      responses:
        "200":
          description: La API responde correctamente y está conectada.

  # POST /api/users/login
  /api/users/login:
    post:
      summary: Inicio de sesión de un usuario.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/loginUser"
      responses:
        "200":
          description: Este servicio retorna el codigo JWT con valores no sensibles y lo setea como cookie.
          content:
            application/json:
              schema:
                type: object
                properties:
                token:
                  type: String
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "400":
          description: Credenciales proporcinadas incorrectas.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o fallo en la conexión.

  # POST /api/users/register
  /api/users/register:
    post:
      summary: Registro de un nuevo usuario.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/requestBodies/updateUser"
      responses:
        "200":
          description: El usuario fue registrado satisfactoriamente en la BDD.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Users"
        "400":
          description: Datos proporcionados incompletos, o el correo ya se encuentra registrado.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o fallo en la conexión.

  # GET /api/users/premium/:uid
  /api/users/premium/{uid}:
    get:
      summary: Actualización de role de usuario.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: uid
          in: path
          required: true
          description: ID del usuario.
          schema:
            type: string
      responses:
        "200":
          description: El rol del usuario fue actualizado satisfactoriamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: String
                    description: Nombre completo del usuario.
                  email:
                    type: String
                    description: Correo del usuario.
                  role:
                    type: String
                    description: Rol del usuario.
                example:
                  name: Joaquin Gonzalez
                  email: ch@coder.com
                  role: PREMIUM
        "404":
          description: El correo o la contraseña son incorrectos.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o fallo en la conexión.


  # GET /api/users/logout
  /api/users/logout:
    get:
      summary: Cierre de sesión del usuario.
      tags:
        - Users
      responses:
        "200":
          description: La sesion se cerro correctamente.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o fallo en la conexión.

  # POST /api/users/pass-recovery
  /api/users/pass-recovery:
    post:
      summary: Creación de URL para cambio de contraseña.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
            example:
              email: "ch@coder.com"
      responses:
        "200":
          description: El correo fue enviado exisotamente al email proporcionado.
        "400":
          description: Error del cliente, usualmente generado por falta de información en la petición o el correo no se encuentra en el sistema.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o fallo en la conexión.

  # POST /api/users/pass-update
  /api/users/pass-update:
    post:
      summary: Cambio de contraseña del usuario.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
            example:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              password: "coder1234"
      responses:
        "200":
          description: La contraseña fue actualizada satisfactoriamente.
        "401":
          description: Error de expiración, el token a expirado.
        "404":
          description: Error, el correo del usuario no fue encontrado.
        "406":
          description: Error, la nueva contraseña no puede ser la misma que la anterior.
        "500":
          description: Error interno del servidor, usualmente generado por una query defectuosa o fallo en la conexión.

components:
  schemas:
    Users:
      type: object
      properties:
        _id:
          type: string
          description: ID autogenerado por MongoDB Atlas.
        first_name:
          type: string
          description: Nombre del usuario.
        last_name:
          type: string
          description: Apellido del usuario.
        email:
          type: string
          description: Correo del usuario.
        password:
          type: string
          description: Contraseña hasheada.
        age:
          type: number
          description: Edad del usuario.
        role:
          type: string
          description: Rol del usuario.
          enum: ["ADMIN", "USER", "PREMIUM"]
        cart_id:
          type: string
          description: ID autogenerado del carrito asignado al usuario.

  requestBodies:
    loginUser:
      description: Credenciales de inicio de sesión.
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
      example:
        email: ch@coder.com
        password: coderpass

    daoUsers:
      description: Datos de registro de usuario.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              password:
                type: string
              role:
                type: string
            required:
              - name
              - email
              - password
              - role
      example:
        name: Joaquin Gonzalez
        email: ch@coder.com
        password: coderpass
        role: PREMIUM

    updateUser:
      description: Datos para actualizar usuario.
      content:
        application/json:
          schema:
            type: object
            properties:
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              password:
                type: string
              role:
                type: string
            required:
              - email
              - password
              - role
      example:
        first_name: Coder
        last_name: House
        email: ch@coder.com
        password: $%#ASD
        role: admin

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Dependiendo del endpoint, el usuario debe tener el rol de 'USER', 'PREMIUM' o 'ADMIN' para tener acceso.
